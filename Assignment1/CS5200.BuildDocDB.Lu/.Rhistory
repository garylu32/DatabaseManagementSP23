newTags <- getTags(newFile)
newFileName <- getFileName(newFile)
for (aTag in newTags) {
newTagPath <- genObjPath(root, aTag)
dir.create(newTagPath)
file.copy(newFile, newTagPath)
file.rename(newFile, newFileName)
}
}
}
### test storeObjs
storeObjs(folder = "/Users/gary/Desktop/CS5200/Assignment/Assignment1/CS5200.BuildDocDB.Lu/Source",
root = "/Users/gary/Desktop/CS5200/Assignment/Assignment1/CS5200.BuildDocDB.Lu/docDB")
?dir.rename
?dir.rename()
?file.rename
file.copy("/Users/gary/Desktop/CS5200/Assignment/Assignment1/CS5200.BuildDocDB.Lu/Source/test#NEU#ISEC.pdf",testAObjPath)
?list.files()
storeObjs <- function(folder, root)
{
# Check abnormal cases
if (!is.character(folder)) stop("Argument folder has to be a string!")
if (!is.character(root)) stop("Argument root has to be a string!")
if (!dir.exists(folder)) stop("Folder directory is not exist!")
if (!dir.exists(root)) stop("Root directory is not exist!")
files <- list.files(path = folder, full.names = TRUE)
for (newFile in files) {
newTags <- getTags(newFile)
newFileName <- getFileName(newFile)
for (aTag in newTags) {
newTagPath <- genObjPath(root, aTag)
dir.create(newTagPath)
file.copy(newFile, newTagPath)
file.rename(newFile, newFileName)
}
}
}
### test storeObjs
storeObjs(folder = "/Users/gary/Desktop/CS5200/Assignment/Assignment1/CS5200.BuildDocDB.Lu/Source",
root = "/Users/gary/Desktop/CS5200/Assignment/Assignment1/CS5200.BuildDocDB.Lu/docDB")
file.rename(newFile, newFileName)
storeObjs <- function(folder, root)
{
# Check abnormal cases
if (!is.character(folder)) stop("Argument folder has to be a string!")
if (!is.character(root)) stop("Argument root has to be a string!")
if (!dir.exists(folder)) stop("Folder directory is not exist!")
if (!dir.exists(root)) stop("Root directory is not exist!")
files <- list.files(path = folder, full.names = TRUE)
for (newFile in files) {
newTags <- getTags(newFile)
for (aTag in newTags) {
newTagPath <- genObjPath(root, aTag)
dir.create(newTagPath)
file.copy(newFile, newTagPath)
newFileName <- getFileName(newFile)
file.rename(newFile, newFileName)
}
}
}
### test storeObjs
storeObjs(folder = "/Users/gary/Desktop/CS5200/Assignment/Assignment1/CS5200.BuildDocDB.Lu/Source",
root = "/Users/gary/Desktop/CS5200/Assignment/Assignment1/CS5200.BuildDocDB.Lu/docDB")
storeObjs(folder = "/Users/gary/Desktop/CS5200/Assignment/Assignment1/CS5200.BuildDocDB.Lu/Source",
root = "/Users/gary/Desktop/CS5200/Assignment/Assignment1/CS5200.BuildDocDB.Lu/docDB")
storeObjs <- function(folder, root)
{
# Check abnormal cases
if (!is.character(folder)) stop("Argument folder has to be a string!")
if (!is.character(root)) stop("Argument root has to be a string!")
if (!dir.exists(folder)) stop("Folder directory is not exist!")
if (!dir.exists(root)) stop("Root directory is not exist!")
files <- list.files(path = folder, full.names = TRUE)
for (newFile in files) {
newTags <- getTags(newFile)
#newFileName <- getFileName(newFile)
for (aTag in newTags) {
newTagPath <- genObjPath(root, aTag)
dir.create(newTagPath)
file.copy(newFile, newTagPath)
#file.rename(newFile, newFileName)
}
}
}
### test storeObjs
storeObjs(folder = "/Users/gary/Desktop/CS5200/Assignment/Assignment1/CS5200.BuildDocDB.Lu/Source",
root = "/Users/gary/Desktop/CS5200/Assignment/Assignment1/CS5200.BuildDocDB.Lu/docDB")
storeObjs <- function(folder, root)
{
# Check abnormal cases
if (!is.character(folder)) stop("Argument folder has to be a string!")
if (!is.character(root)) stop("Argument root has to be a string!")
if (!dir.exists(folder)) stop("Folder directory is not exist!")
if (!dir.exists(root)) stop("Root directory is not exist!")
files <- list.files(path = folder, full.names = FALSE)
for (newFile in files) {
newTags <- getTags(newFile)
#newFileName <- getFileName(newFile)
for (aTag in newTags) {
newTagPath <- genObjPath(root, aTag)
dir.create(newTagPath)
file.copy(newFile, newTagPath)
#file.rename(newFile, newFileName)
}
}
}
### test storeObjs
storeObjs(folder = "/Users/gary/Desktop/CS5200/Assignment/Assignment1/CS5200.BuildDocDB.Lu/Source",
root = "/Users/gary/Desktop/CS5200/Assignment/Assignment1/CS5200.BuildDocDB.Lu/docDB")
# install.packages("tidyverse")
library(tidyverse)
globalVar <- 0
rootDir <- "docDB"
# Database configuration function
# Function that sets up all folders and database related structure
# @param - root, the root of the path
# @param - path, the file path
# @return - no return
configDB <- function(root = "", path = "")
{
# Check abnormal cases
if (!is.character(root)) stop("Input root has to be a String!")
if (!is.character(path)) stop("Input path has to be a String!")
if (nchar(root) == 0) stop("Input root is empty!")
rootPath <- paste(path,root,sep = "/")
rootDir <<- rootPath
}
# Tag folder generation function
# Function that returns the correctly genereated path to a tag folder
# @param - root, the root of the path
# @param - tag, the tag folder of the file
# @return - path to the tag folder
genObjPath <- function(root = "", tag = "")
{
# Check abnormal cases
if(!is.character(root)) stop("Input root has to be a string!")
if(!is.character(tag)) stop("Input tag has to be a string!")
resTag <- str_replace_all(tag, "#", "")
return(paste(root,resTag,sep = "/"))
}
# Get tag function
# Function that returns a vector of tags in the filename
# @param - fileName, the file name
# @return - a vector of tags
getTags <- function(fileName = "")
{
# Check abnormal cases
if (!is.character(fileName)) stop("Input fileName has to be a String!")
if (nchar(fileName) == 0) stop("Input fileName is NA!")
# Use strsplit to split the input file name to a vector
fileSplits <- strsplit(fileName, "(?<=.)(?=[#.])",perl = TRUE)[[1]]
fileTags <- fileSplits[grepl("#", fileSplits)]
return(fileTags)
}
# Get file name function
# Function that returns file name
# @param - fileName, the file name
# @return - string, file name
getFileName <- function(fileName = "")
{
# Check abnormal cases
if (!is.character(fileName)) stop("Input fileName has to be a String!")
if (nchar(fileName) == 0) stop("Input fileName is NA!")
fileSplits <- strsplit(fileName, "(?<=.)(?=[#.])",perl = TRUE)[[1]]
resFileName <- fileSplits[!grepl("#", fileSplits)]
res <- paste(resFileName, collapse = "")
return(res)
}
# Store object function
# Function that copies all files to root folder
# @param - folder, holds all the specified documents
# @param - root, the root of the path
# @return - no return
storeObjs <- function(folder, root)
{
# Check abnormal cases
if (!is.character(folder)) stop("Argument folder has to be a string!")
if (!is.character(root)) stop("Argument root has to be a string!")
if (!dir.exists(folder)) stop("Folder directory is not exist!")
if (!dir.exists(root)) stop("Root directory is not exist!")
files <- list.files(path = folder, full.names = FALSE)
for (newFile in files) {
newTags <- getTags(newFile)
#newFileName <- getFileName(newFile)
for (aTag in newTags) {
newTagPath <- genObjPath(root, aTag)
dir.create(newTagPath)
file.copy(newFile, newTagPath)
#file.rename(newFile, newFileName)
}
}
}
### test storeObjs
storeObjs(folder = "/Users/gary/Desktop/CS5200/Assignment/Assignment1/CS5200.BuildDocDB.Lu/Source",
root = "/Users/gary/Desktop/CS5200/Assignment/Assignment1/CS5200.BuildDocDB.Lu/docDB")
storeObjs <- function(folder, root)
{
# Check abnormal cases
if (!is.character(folder)) stop("Argument folder has to be a string!")
if (!is.character(root)) stop("Argument root has to be a string!")
if (!dir.exists(folder)) stop("Folder directory is not exist!")
if (!dir.exists(root)) stop("Root directory is not exist!")
files <- list.files(path = folder, full.names = TRUE)
for (newFile in files) {
newTags <- getTags(newFile)
#newFileName <- getFileName(newFile)
for (aTag in newTags) {
newTagPath <- genObjPath(root, aTag)
dir.create(newTagPath)
file.copy(newFile, newTagPath)
#file.rename(newFile, newFileName)
}
}
}
### test storeObjs
storeObjs(folder = "/Users/gary/Desktop/CS5200/Assignment/Assignment1/CS5200.BuildDocDB.Lu/Source",
root = "/Users/gary/Desktop/CS5200/Assignment/Assignment1/CS5200.BuildDocDB.Lu/docDB")
testAObjPath = genObjPath(root = "/Users/gary/Desktop/CS5200/Assignment/Assignment1/CS5200.BuildDocDB.Lu", tag = "#testA")
testFileC <- file.copy("/Users/gary/Desktop/CS5200/Assignment/Assignment1/CS5200.BuildDocDB.Lu/Source/test#NEU#ISEC.pdf",testAObjPath)
storeObjs <- function(folder, root)
{
# Check abnormal cases
if (!is.character(folder)) stop("Argument folder has to be a string!")
if (!is.character(root)) stop("Argument root has to be a string!")
if (!dir.exists(folder)) stop("Folder directory is not exist!")
if (!dir.exists(root)) stop("Root directory is not exist!")
files <- list.files(path = folder, full.names = TRUE)
for (newFile in files) {
newTags <- getTags(newFile)
for (aTag in newTags) {
newTagPath <- genObjPath(root, aTag)
dir.create(newTagPath)
file.copy(newFile, newTagPath)
}
}
#Change the name of the copied files
filesB <- list.files(path = root, full.names = TRUE)
for (resFile in filesB) {
newFileName = getFileName(resFile)
file.rename(resFile,newFileName)
}
}
### test storeObjs
storeObjs(folder = "/Users/gary/Desktop/CS5200/Assignment/Assignment1/CS5200.BuildDocDB.Lu/Source",
root = "/Users/gary/Desktop/CS5200/Assignment/Assignment1/CS5200.BuildDocDB.Lu/docDB")
testFiles <- list.files(path = "/Users/gary/Desktop/CS5200/Assignment/Assignment1/CS5200.BuildDocDB.Lu/docDB",
full.names = TRUE)
testFiles
?list.files
storeObjs <- function(folder, root)
{
# Check abnormal cases
if (!is.character(folder)) stop("Argument folder has to be a string!")
if (!is.character(root)) stop("Argument root has to be a string!")
if (!dir.exists(folder)) stop("Folder directory is not exist!")
if (!dir.exists(root)) stop("Root directory is not exist!")
files <- list.files(path = folder, full.names = TRUE)
for (newFile in files) {
newTags <- getTags(newFile)
for (aTag in newTags) {
newTagPath <- genObjPath(root, aTag)
dir.create(newTagPath)
file.copy(newFile, newTagPath)
filesB <- list.files(path = newTagPath, full.names = TRUE) {
storeObjs <- function(folder, root)
{
# Check abnormal cases
if (!is.character(folder)) stop("Argument folder has to be a string!")
if (!is.character(root)) stop("Argument root has to be a string!")
if (!dir.exists(folder)) stop("Folder directory is not exist!")
if (!dir.exists(root)) stop("Root directory is not exist!")
files <- list.files(path = folder, full.names = TRUE)
for (newFile in files) {
newTags <- getTags(newFile)
for (aTag in newTags) {
newTagPath <- genObjPath(root, aTag)
dir.create(newTagPath)
file.copy(newFile, newTagPath)
filesB <- list.files(path = newTagPath, full.names = TRUE)
for (resFile in filesB) {
newFileName = getFileName(resFile)
file.rename(resFile,newFileName)
}
}
}
}
### test storeObjs
storeObjs(folder = "/Users/gary/Desktop/CS5200/Assignment/Assignment1/CS5200.BuildDocDB.Lu/Source",
root = "/Users/gary/Desktop/CS5200/Assignment/Assignment1/CS5200.BuildDocDB.Lu/docDB")
?cat
# Store object function with Verbose
# Function that copies all files to root folder
# @param - folder, holds all the specified documents
# @param - root, the root of the path
# @param - verbose, boolean, print a message if true
# @return - no return
storeObjs <- function(folder, root, verbose = TRUE)
{
# Check abnormal cases
if (!is.character(folder)) stop("Argument folder has to be a string!")
if (!is.character(root)) stop("Argument root has to be a string!")
if (!dir.exists(folder)) stop("Folder directory is not exist!")
if (!dir.exists(root)) stop("Root directory is not exist!")
files <- list.files(path = folder, full.names = TRUE)
for (newFile in files) {
newTags <- getTags(newFile)
for (aTag in newTags) {
newTagPath <- genObjPath(root, aTag)
dir.create(newTagPath)
file.copy(newFile, newTagPath)
filesB <- list.files(path = newTagPath, full.names = TRUE)
for (resFile in filesB) {
newFileName = getFileName(resFile)
file.rename(resFile,newFileName)
}
}
print(paste("Copying", newFileName, "to", str_replace_all(newTags, "#", "")))
}
}
### test storeObjs with verbose
storeObjs(folder = "/Users/gary/Desktop/CS5200/Assignment/Assignment1/CS5200.BuildDocDB.Lu/Source",
root = "/Users/gary/Desktop/CS5200/Assignment/Assignment1/CS5200.BuildDocDB.Lu/docDB",
verbose = TRUE)
# Store object function with Verbose
# Function that copies all files to root folder
# @param - folder, holds all the specified documents
# @param - root, the root of the path
# @param - verbose, boolean, print a message if true
# @return - no return
storeObjs <- function(folder, root, verbose = TRUE)
{
# Check abnormal cases
if (!is.character(folder)) stop("Argument folder has to be a string!")
if (!is.character(root)) stop("Argument root has to be a string!")
if (!dir.exists(folder)) stop("Folder directory is not exist!")
if (!dir.exists(root)) stop("Root directory is not exist!")
files <- list.files(path = folder, full.names = TRUE)
for (newFile in files) {
newTags <- getTags(newFile)
for (aTag in newTags) {
newTagPath <- genObjPath(root, aTag)
dir.create(newTagPath)
file.copy(newFile, newTagPath)
filesB <- list.files(path = newTagPath, full.names = FALSE)
for (resFile in filesB) {
newFileName = getFileName(resFile)
file.rename(resFile,newFileName)
}
}
print(paste("Copying", newFileName, "to", str_replace_all(newTags, "#", "")))
}
}
### test storeObjs with verbose
storeObjs(folder = "/Users/gary/Desktop/CS5200/Assignment/Assignment1/CS5200.BuildDocDB.Lu/Source",
root = "/Users/gary/Desktop/CS5200/Assignment/Assignment1/CS5200.BuildDocDB.Lu/docDB",
verbose = TRUE)
# Store object function with Verbose
# Function that copies all files to root folder
# @param - folder, holds all the specified documents
# @param - root, the root of the path
# @param - verbose, boolean, print a message if true
# @return - no return
storeObjs <- function(folder, root, verbose = TRUE)
{
# Check abnormal cases
if (!is.character(folder)) stop("Argument folder has to be a string!")
if (!is.character(root)) stop("Argument root has to be a string!")
if (!dir.exists(folder)) stop("Folder directory is not exist!")
if (!dir.exists(root)) stop("Root directory is not exist!")
files <- list.files(path = folder, full.names = FALSE)
for (newFile in files) {
newTags <- getTags(newFile)
for (aTag in newTags) {
newTagPath <- genObjPath(root, aTag)
dir.create(newTagPath)
file.copy(newFile, newTagPath)
filesB <- list.files(path = newTagPath, full.names = TRUE)
for (resFile in filesB) {
newFileName = getFileName(resFile)
file.rename(resFile,newFileName)
}
}
print(paste("Copying", newFileName, "to", str_replace_all(newTags, "#", "")))
}
}
### test storeObjs with verbose
storeObjs(folder = "/Users/gary/Desktop/CS5200/Assignment/Assignment1/CS5200.BuildDocDB.Lu/Source",
root = "/Users/gary/Desktop/CS5200/Assignment/Assignment1/CS5200.BuildDocDB.Lu/docDB",
verbose = TRUE)
# @return - no return
storeObjs <- function(folder, root, verbose = TRUE)
{
# Check abnormal cases
if (!is.character(folder)) stop("Argument folder has to be a string!")
if (!is.character(root)) stop("Argument root has to be a string!")
if (!dir.exists(folder)) stop("Folder directory is not exist!")
if (!dir.exists(root)) stop("Root directory is not exist!")
files <- list.files(path = folder, full.names = TRUE)
for (newFile in files) {
newTags <- getTags(newFile)
for (aTag in newTags) {
newTagPath <- genObjPath(root, aTag)
dir.create(newTagPath)
file.copy(newFile, newTagPath)
filesB <- list.files(path = newTagPath, full.names = TRUE)
for (resFile in filesB) {
newFileName = getFileName(resFile)
file.rename(resFile,newFileName)
}
}
print(paste("Copying", newFileName, "to", str_replace_all(newTags, "#", "")))
}
}
### test storeObjs with verbose
storeObjs(folder = "/Users/gary/Desktop/CS5200/Assignment/Assignment1/CS5200.BuildDocDB.Lu/Source",
root = "/Users/gary/Desktop/CS5200/Assignment/Assignment1/CS5200.BuildDocDB.Lu/docDB",
verbose = TRUE)
testFileNameD <- "/doc/5200.c"
str_extract(testFileNameD, "/")
str_extract(testFileNameD, "/[^\\s\\.]+")
str_extract(testFileNameD, "/[^\\s\\]+")
str_extract(testFileNameD, "/[^\\s\\.]+")
str_extract(testFileNameD, ".[^\\s\\.]+")
str_extract(testFileNameD, ".[\\s\\.]+")
str_extract(testFileNameD, "/[\\s\\.]+")
str_extract(testFileNameD, ".[\\s\\.]+")
str_extract(testFileNameD, "/[\\s\\.]+")
testFileNameD <- "/doc/5200.c"
str_extract(testFileNameD, "/[\\s\\.]+")
str_extract(testFileNameD, "/[^\\s\\.]+")
str_extract(testFileNameD, "/[^\\s\\.]")
str_extract(testFileNameD, "[^\\s\\.]/")
str_extract(testFileNameD, "/[^\\s\\.].")
str_extract(testFileNameD, "/[^\\s\\.]+.")
str_extract(testFileNameD, "/[^\\s\\.]+.[^\\s\\.]")
str_extract(testFileNameD, ".[^\\s\\.]+")
str_extract(testFileNameD, "[^\\s\\.]+")
str_extract(testFileNameD, "?<=[^\\s\\.]+")
str_extract(testFileNameD, "(?<=)[^\\s\\.]+")
str_extract(testFileNameD, "(?<=.)[^\\s\\.]+")
str_extract(testFileNameD, "[^\\s\\.](?<=.)[")
str_extract(testFileNameD, "[^\\s\\.](?<=.)")
str_extract(testFileNameD, "(?<=.)")
basename(testFileNameD)
storeObjs <- function(folder, root, verbose = TRUE)
{
# Check abnormal cases
if (!is.character(folder)) stop("Argument folder has to be a string!")
if (!is.character(root)) stop("Argument root has to be a string!")
if (!dir.exists(folder)) stop("Folder directory is not exist!")
if (!dir.exists(root)) stop("Root directory is not exist!")
files <- list.files(path = folder, full.names = TRUE)
for (newFile in files) {
newTags <- getTags(newFile)
for (aTag in newTags) {
newTagPath <- genObjPath(root, aTag)
dir.create(newTagPath)
file.copy(newFile, newTagPath)
filesB <- list.files(path = newTagPath, full.names = TRUE)
for (resFile in filesB) {
newFileName = getFileName(resFile)
file.rename(resFile,newFileName)
}
}
print(paste("Copying", basename(newFileName), "to", str_replace_all(newTags, "#", "")))
}
}
### test storeObjs with verbose
storeObjs(folder = "/Users/gary/Desktop/CS5200/Assignment/Assignment1/CS5200.BuildDocDB.Lu/Source",
root = "/Users/gary/Desktop/CS5200/Assignment/Assignment1/CS5200.BuildDocDB.Lu/docDB",
verbose = TRUE)
?unlink
unlink("/Users/gary/Desktop/CS5200/Assignment/Assignment1/CS5200.BuildDocDB.Lu/docDB", recursive = FALSE)
?file.remove
clearDB <- function(root)
{
if (!is.character(root)) stop("Argument root has to be a string!")
if (!dir.exists(root)) stop("Root directory is not exist!")
f <- list.files(root, include.dirs = FALSE, full.names = TRUE, recursive = TRUE)
file.remove(f)
}
### test clearDB
clearDB(root = "/Users/gary/Desktop/CS5200/Assignment/Assignment1/CS5200.BuildDocDB.Lu/docDB")
clearDB <- function(root)
{
if (!is.character(root)) stop("Argument root has to be a string!")
if (!dir.exists(root)) stop("Root directory is not exist!")
f <- list.files(root, include.dirs = TRUE, full.names = TRUE, recursive = TRUE)
file.remove(f)
}
### test storeObjs with verbose
storeObjs(folder = "/Users/gary/Desktop/CS5200/Assignment/Assignment1/CS5200.BuildDocDB.Lu/Source",
root = "/Users/gary/Desktop/CS5200/Assignment/Assignment1/CS5200.BuildDocDB.Lu/docDB",
verbose = TRUE)
### test clearDB
clearDB(root = "/Users/gary/Desktop/CS5200/Assignment/Assignment1/CS5200.BuildDocDB.Lu/docDB")
clearDB <- function(root)
{
if (!is.character(root)) stop("Argument root has to be a string!")
if (!dir.exists(root)) stop("Root directory is not exist!")
f <- list.files(root, include.dirs = FALSE, full.names = TRUE, recursive = FALSE)
file.remove(f)
}
### test clearDB
clearDB(root = "/Users/gary/Desktop/CS5200/Assignment/Assignment1/CS5200.BuildDocDB.Lu/docDB")
main()
### test clearDB
clearDB(root = "/Users/gary/Desktop/CS5200/Assignment/Assignment1/CS5200.BuildDocDB.Lu/docDB")
### test storeObjs with verbose
storeObjs(folder = "/Users/gary/Desktop/CS5200/Assignment/Assignment1/CS5200.BuildDocDB.Lu/Source",
root = "/Users/gary/Desktop/CS5200/Assignment/Assignment1/CS5200.BuildDocDB.Lu/docDB",
verbose = TRUE)
